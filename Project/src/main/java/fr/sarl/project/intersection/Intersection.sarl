/** 
 * 
 */
package fr.sarl.project.intersection

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.Date
import java.util.LinkedList
import java.util.Map
import java.util.PriorityQueue
import java.util.Queue
import java.util.TreeMap
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * @author louec
 * 
 */
agent Intersection {
	uses Logging, Lifecycle, Schedules, DefaultContextInteractions
	
	/** The body of the intersection */
	var body : IntersectionBody
	
	/** Cars currently in the context of the intersection */
	val cars : Map<UUID, PerceivedCar> = new TreeMap
	
	/** Waiting queues for each road section of the intersection */
	val roadSections : Map<Integer, Queue<UUID>> = new TreeMap
	val roadSectionIds : int[] = #[-1, -1, -1, -1]

	val crossingSquareReservations : UUID[] = #[null, null, null, null]
	val SQUARE_NE = 0
	val SQUARE_NW = 1
	val SQUARE_SW = 2
	val SQUARE_SE = 3
	
	var initialized = false
	
	val MAX_FOLLOW = 3

	/**
	 * Init parameters :
	 * [0-3] Road section numbers (/!\ before changing sending order, update "position" in enum CrossroadDirection /!\)
	 * [0] Northern
	 * [1] Western
	 * [2] Eastern
	 * [3] Southern
	 * [4] Intersection Body
	 */
	on Initialize {		
		// init waiting queues
		for (var i = 0; i < 4; i++) {
			var id = occurrence.parameters.get(i) as Integer
			roadSections.put(id, new LinkedList)
			roadSectionIds.set(i, id)
		}
		
		body = occurrence.parameters.get(4) as IntersectionBody
		
		initialized = true
		info("Intersection created")
		
		every(500) [
			manageCrossroad
		]
	}

	/** 
	 * await for the intersection to be fully initialized
	 */
	def awaitInitialization(info : String) {
		while (!initialized) {
			info(info)
		}
	}
	
	/**
	 * Overall management of the crossroad
	 */
	def manageCrossroad() {
		val waitingCars : PriorityQueue<PerceivedCar> = waitingCarsByEnteringOrder
		
		while (waitingCars.peek !== null) {
			var car = waitingCars.poll
			
			synchronized (crossingSquareReservations) { 
				if (isPathFree(car.crossingPath)) {
					allowToGo(car)
					
					// if there are cars waiting behind this one, try to make them follow
					val carsBehind = roadSections.get(car.enteringRoadSection).clone
					val pathToFollow = car.crossingPath
					var prevCar = car
					var prevCarSent = true
					
					for (var i = 0; i < carsBehind.length && i < MAX_FOLLOW && prevCarSent; i++) {
						car = cars.get(carsBehind.get(i))
						
						// if car initialized and can follow the path of the first one, go
						if (car.initialized && canFollow(car.crossingPath, pathToFollow)) {
							allowToGo(car, prevCar.id)

						} else {
							prevCarSent = false
						}
						prevCar = car
					}
				}
			}
		}
	}
	
	/**
	 * Get the first waiting cars on each road section and order them by entering time
	 */
	def waitingCarsByEnteringOrder() : PriorityQueue<PerceivedCar> {
		val waitingCars : PriorityQueue<PerceivedCar> = new PriorityQueue()
		
		// save the first car of each road section if there is one
		for (rsId : roadSectionIds) {
			var roadSection = roadSections.get(rsId)
			
			synchronized(roadSection) {
				var carId = roadSection.peek
				if (carId !== null) {
					var car = cars.get(carId)
					if (car.initialized) {
						waitingCars.add(car)
					}
				}
			}
		}
		
		return waitingCars
	}
	
	def canFollow(path : int[], pathToFollow : int[]) : boolean {
		if (path.length > pathToFollow.length) {
			return false
		}
		
		var ok = true
		for (var i = 0; i < path.length; i++) {
			ok = ok && path.get(i) === pathToFollow.get(i)
		}
		return ok
	}
	
	/**
	 * Convert a road section id to a CrossroadDirection
	 */
	def rsIdToDirection(roadSectionId : int) {
		var i : int
		for (i = 0; i < roadSectionIds.length && roadSectionIds.get(i) != roadSectionId; i++) {}		
		return CrossroadDirection.fromPosition(i)
	}
	
	/**
	 * Find the path a car must take to go to its target through the intersection
	 */
	def findPath(fromId : int, toId : int) : int[] {
		var from : CrossroadDirection = rsIdToDirection(fromId)
		var to : CrossroadDirection = rsIdToDirection(toId)

		return from.findPath(to, SQUARE_NW, SQUARE_NE, SQUARE_SE, SQUARE_SW)
	}

	/**
	 * Check if the path from one direction to another is not yet reserved
	 * @return true if the path is free, false else
	 */
	def isPathFree(path : int[]) : boolean {
		var isFree = true

		for (square : path) {
			isFree = isFree && crossingSquareReservations.get(square) === null
		}

		return isFree
	}

	/** 
	 * Reserve the path from one direction to another for a given car
	 */
	def lockPath(path : int[], reserver : UUID) {
		for (square : path) {
			crossingSquareReservations.set(square, reserver)
		}	
	}

	/**
	 * Unlock a crossing square
	 */
	def unlockSquare(square : int, reserver : UUID) {
		synchronized (crossingSquareReservations) {
			if (crossingSquareReservations.get(square) === reserver) {
				crossingSquareReservations.set(square, null)
			}
		}
	}

	/** 
	 * Allow a car to cross the intersection
	 * Lock its path and remove it from the currently waiting cars
	 */
	def allowToGo(car : PerceivedCar, carToFollow : UUID = null) {
		lockPath(car.crossingPath, car.id)
		car.isGoing = true

		// remove the car from its road section
		val roadSectionNumber = cars.get(car.id).enteringRoadSection
		val roadSection = roadSections.get(roadSectionNumber)
		synchronized (roadSection) {
			roadSection.remove(car.id)
		}

		new Go(carToFollow).emit[it.UUID == car.id]
	}

	/** 
	 * Find in which crossing square a given position points to
	 * @return the crossing square, or -1 if the given position points outside of the intersection center
	 */
	def positionToCrossingSquare(position : Vector2d) : int {
		val bodyCenter = body.intersectionCenter
		val posNorth = bodyCenter.positionNorthWest.y
		val posSouth = bodyCenter.positionSouthEast.y
		val posEast = bodyCenter.positionSouthEast.x
		val posWest = bodyCenter.positionNorthWest.x
		val centerX = bodyCenter.center.x
		val centerY = bodyCenter.center.y
		
		// test if outside intersection center
		if (position.x < posWest || position.x > posEast || position.y < posNorth || position.y > posSouth) {
			return -1
		}
		
		val isNorth = position.y > posNorth && position.y < centerY
		val isWest = position.x > posWest && position.x < centerX

		return isNorth
			   ? isWest ? SQUARE_NW : SQUARE_NE  // north squares
			   : isWest ? SQUARE_SW : SQUARE_SE  // south squares
	}

	/** 
	 * Triggered when a car joins the context of the intersection
	 * Add the new car to the lists of known entities
	 */
	on JoinIntersection {
		awaitInitialization("<join> car [" + occurrence.carId + "] awaiting initialization of intersection [" + ID + "]")
		
		// save only the needed info
		val car = new PerceivedCar(occurrence.carId, occurrence.position, occurrence.roadSection, occurrence.target)

		// store it
		synchronized (cars) {
			cars.put(car.id, car)
		}

		// assign it to the right road section
		val roadSection = roadSections.get(car.enteringRoadSection)
		synchronized (roadSection) {
			roadSection.add(car.id)
		}
		
		// compute the crossing path of the car
		car.crossingPath = findPath(car.enteringRoadSection, car.targetRoadSection)
		car.initialized = true
	}
	
	/**
	 * Triggered when a car send its new position to the intersection
	 * If the car is crossing, free the squares it has already gone through
	 * If the car has finished crossing, make it leave the context of the intersection
	 */
	on UpdatePosition {
		awaitInitialization("<update> car [" + occurrence.carId + "] awaiting initialization of intersection [" + ID + "]")
		
		var car : PerceivedCar
		synchronized (cars) {
			car = cars.get(occurrence.carId)
		}

		if (car === null) {
			return
		}
		
		synchronized (car) {
			car.position = occurrence.position
			
			// if car is crossing, check current crossing square and unlock path if possible
			var currentSquare = positionToCrossingSquare(car.position)
			if (car.isGoing && currentSquare !== car.currentCrossingSquare) {
				unlockSquare(car.currentCrossingSquare, car.id)
				car.currentCrossingSquare = currentSquare
				
				// outside of intersection center --> has leaved the intersection
				if (currentSquare === -1) {
					leaveIntersection(car.id)
				}
			}
		}
	}

	/** 
	 * Remove a given car from the lists of known entities
	 */
	def leaveIntersection(carId : UUID) {
		// remove the car from the storage
		synchronized (cars) {
			cars.remove(carId)
		}
	}

	on Die {
		killMe
	}

	on Destroy {
		info("Intersection destroyed")
	}

	/** 
	 * Minimalization of a CarBody with only the required information for the Intersection
	 */
	static class PerceivedCar implements Comparable<PerceivedCar>  {

		@Accessors
		val id : UUID

		@Accessors
		var position : Vector2d

		@Accessors
		val enteringTime : long

		// Id of the current road section
		@Accessors
		val enteringRoadSection : int

		// Id of the targeted road section
		@Accessors
		val targetRoadSection : int
		
		// Path through the intersection center
		@Accessors
		var crossingPath : int[]

		@Accessors
		var isGoing : boolean
		
		@Accessors
		var currentCrossingSquare : int
		
		@Accessors
		var initialized : boolean

		new(id : UUID, position : Vector2d, roadSection : int, target : int) {
			this.id = id
			this.position = position
			this.enteringTime = new Date().getTime()
			this.enteringRoadSection = roadSection
			this.targetRoadSection = target
			this.isGoing = false
			this.currentCrossingSquare = -1
			this.initialized = false
		}
	
		def compareTo(otherCar : PerceivedCar) : int {
			return enteringTime.compareTo(otherCar.enteringTime)
		}
	}
}
