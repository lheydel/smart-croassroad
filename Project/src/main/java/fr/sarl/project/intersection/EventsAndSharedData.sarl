package fr.sarl.project.intersection

import java.util.ArrayList
import java.util.HashMap
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import org.eclipse.xtend.lib.annotations.Accessors

event Die

event Wait

event LeaveWaitingList {
	var roadSection : int
	var intersection : UUID
	var car : UUID
	
	new (roadSection : int, car : UUID,intersection : UUID){
		
		this.roadSection = roadSection
		this.car = car
		this.intersection = intersection
	}
}

event LeaveLeavingList {
	var roadSection : int
	var intersection : UUID
	var car : UUID

	new (roadSection : int, car : UUID, intersection : UUID) {

		this.roadSection = roadSection
		this.car = car
		this.intersection = intersection
	}
}

event Go {
	var carToFollow : UUID
	
	new (carToFollow : UUID = null) {
		this.carToFollow = carToFollow
	}
}

event Action {
	var influence : Vector2d
	var direction : Integer
	
	new (influence : Vector2d, direction : Integer){
		this.influence = influence
		this.direction = direction
	}
}

event JoinIntersection {
	// Id of the car joining the intersection
	var carId : UUID
	
	// Position of the car
	var position : Vector2d
	var roadSection : int
	
	// Targeted road section
	var target : int
	
	new(carId : UUID, position : Vector2d, roadSection : int, target : int) {
		this.carId = carId
		this.position = position
		this.roadSection = roadSection
		this.target = target
	}
}


event UpdatePosition {
	var carId : UUID 
	var position : Vector2d
	
	new (carId : UUID, position : Vector2d) {
		this.carId = carId
		this.position = position
	}
}

event Perception {
	val carBody: CarBody
	val frontCarBody: CarBody

	new (carBody : CarBody, previousCarBody : CarBody) {
		this.carBody = carBody
		this.frontCarBody = previousCarBody
	}
}

/** 
 * Event specifying when the GUI must be refreshed according to the new environmental state embodied by the specified map
 * @author Victor Sonza
 */
event GuiRepaint

event UpdateTimer {
	val timer : double
	
	new (timer : double) {
		this.timer = timer
	}
}

event Start
event CarReady
event CarDead

class CarBody {

	// Position of the body
	@Accessors
	var position : Vector2d
	
	// Id of the current road section
	@Accessors
	var roadSection : int // Peut être modifier ça, de manière à ce que la car demande à l'environnement sa road section ???

	// Address of the body's owner
	@Accessors
	var owner : UUID

	// Agent's speed
	@Accessors
	var speed : Vector2d

	// Acceleration
	@Accessors
	var acceleration : Vector2d
	//direction
	@Accessors
	var direction : int
	
	new(owner : UUID, position : Vector2d, roadSection : int, speed : Vector2d, dir : int) {
		this.position = position
		this.roadSection = roadSection
		this.owner = owner
		this.speed = speed
		acceleration = new Vector2d
		this.direction = dir
	}
	
}

class IntersectionBody
{
	@Accessors
	var owner : UUID
	
	// List of the road sections
	@Accessors
	var roadSections : ArrayList<RoadSection>
	
	@Accessors
	var intersectionCenter : IntersectionCenter
	
	new(o: UUID)
	{
		this.owner = o // new(numS : int,posNW : Vector2d, posSE: Vector2d,w : int,l:int, c: ArrayList<CarBody>)
		var w = 100
		var l = 400

		val rs : RoadSection[] = #[null, null, null, null]
		rs.set(CrossroadDirection.NORTH.position, new RoadSection(1, new Vector2d(400, 0), new Vector2d(500, 400), w, l, new ArrayList<CarBody>()))
		rs.set(CrossroadDirection.WEST.position, new RoadSection(2, new Vector2d(0, 500), new Vector2d(400, 600), w, l, new ArrayList<CarBody>()))
		rs.set(CrossroadDirection.EAST.position, new RoadSection(3, new Vector2d(600, 400), new Vector2d(1000, 500), w, l, new ArrayList<CarBody>()))
		rs.set(CrossroadDirection.SOUTH.position, new RoadSection(4, new Vector2d(500, 600), new Vector2d(600, 1000), w, l, new ArrayList<CarBody>()))
		
		intersectionCenter = new IntersectionCenter(new Vector2d(500, 500), new Vector2d(400, 400), new Vector2d(600, 600)) 

		roadSections = newArrayList(rs)
	}
	
	
	def getCars() : HashMap<UUID, CarBody>
	{
		var res : HashMap<UUID, CarBody> = new HashMap<UUID, CarBody>()
		for(r : roadSections)
		{
			for (cb : r.waitingList)
			{
				res.put(cb.owner,cb)
			}
		}
		
		return res
	}
	
}
