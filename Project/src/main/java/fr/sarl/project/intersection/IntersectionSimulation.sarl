package fr.sarl.project.intersection

/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2019 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import io.sarl.bootstrap.SRE
import io.sarl.bootstrap.SREBootstrap
import fr.sarl.project.intersection.gui.EnvironmentGui
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.core.OpenEventSpace
import java.util.Map
import java.util.UUID
import java.util.concurrent.ConcurrentHashMap
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import java.util.List

/** 
 * The boids simulation launching the SARL environment with the corresponding agent and ensuring the communication between agents and the GUI
 * @author Nicolas Gaud
 */
class IntersectionSimulation implements EventListener {

	public static val id = UUID::randomUUID

	/** 
	 * SRE Kernel instance
	 */
	var kernel : SREBootstrap

	/** 
	 * The default SARL context where environment and boids are spawned
	 */
	var defaultSARLContext : AgentContext

	/** 
	 * Identifier of the environment
	 */
	var environment : UUID

	var width = Settings::EnvtWidth

	var height = Settings::EnvtHeight

	/** 
	 * Map buffering cars before launch/start
	 */
	var carToLaunch : Map<List<Car>, Integer>

	/** 
	 * Map buffering cars' bodies before launch/start
	 */
	var carBodies : ConcurrentHashMap<UUID, CarBody>

	var carCount : int

	/** 
	 * Boolean specifying id the simulation is started or not.
	 */
	var isSimulationStarted = false

	/** 
	 * the vent space used to establish communication between GUI and agents,
	 * Especially enabling GUI to forward start event to the environment, 
	 * respectively the environment to send GUIRepain at each simulation step to the GUI
	 */
	var ^space : OpenEventSpace

	/** 
	 * The Graphical user interface
	 */
	var myGUI : EnvironmentGui

	new {
		carCount = 0

		this.carBodies = new ConcurrentHashMap

		carToLaunch = newHashMap
	}

	def start : void {
		launchAllAgents
		isSimulationStarted = true
	}

	def stop : void {
		killAllAgents
		isSimulationStarted = false
	}

	/** 
	 * Add the boids of a population to the simulation.
	 * 
	 * @param p - the population to add.
	 */
	def addCar(p : List<Car>) : void {
		carCount++
		if (!isSimulationStarted) {
			var currentBoidCount = carToLaunch.get(p)
			if (currentBoidCount !== null) {
				currentBoidCount++
			} else {
				currentBoidCount = new Integer(1)
			}
			carToLaunch.put(p, currentBoidCount)
		} else {
			launchCar(p, "Car" + carCount)
		}
	}

	private def launchAllAgents : void {

		kernel = SRE::getBootstrap

		defaultSARLContext = kernel.startWithoutAgent

		environment = kernel.startAgent(typeof(Environment), height, width)

		launchAllCars
		^space = defaultSARLContext.defaultSpace as OpenEventSpace

		this.myGUI = new EnvironmentGui(^space, height, width, this.carBodies)

		// Registering to receive GUIRepaint events
		^space.register(this)
		// Sending start to Environment
		^space.emit(id, new Start(this.carBodies))
	}

	private def launchAllCars : void {
		var carNum = 0
		for (e : carToLaunch.entrySet) {
			for (var i = 0; i < e.value; i++) {
				carNum++
				e.key.launchCar("Car " + carNum)
			}
		}
	}

	@SuppressWarnings("constant_condition", "discouraged_reference")
	private def launchCar(p : List<Car>, boidName : String) : void {
		var initialPosition = new Vector2d((Math::random - 0.5) * width, (Math::random - 0.5) * height)
		var initialVitesse = new Vector2d(Math::random - 0.5, Math::random - 0.5)

		var b = kernel.startAgent(typeof(Car), environment, p, initialPosition, initialVitesse, boidName)
		
		// 	new(owner : UUID, position : Vector2d, roadSection : int, speed : Vector2d)
		this.carBodies.put(b, new CarBody(environment, initialPosition,0,initialVitesse,1))

		if (Settings::isLogActivated) {
			System.out.println("Lancement d'une car Ã  la position " + initialPosition + " et avec une vitesse de " +
				initialVitesse)
		}
	}

	private def killAllAgents : void {
		// do something if you want to
	}

	override getID : UUID {
		id
	}

	/** 
	 * Methods managing event coming from agents 
	 */
	override receiveEvent(^event : Event) {
		if (^event instanceof GuiRepaint) { // event from the environment, GUI must be refreshed
			this.myGUI.cars = ^event.perceivedAgentBody
			this.myGUI.repaint
		}
	}

}
