package fr.sarl.project.intersection

/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2019 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import io.sarl.bootstrap.SRE
import io.sarl.bootstrap.SREBootstrap
import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import java.util.UUID

/** 
 * The boids simulation launching the SARL environment with the corresponding agent and ensuring the communication between agents and the GUI
 * @author Nicolas Gaud
 */
class IntersectionSimulation implements EventListener {

	public static val id = UUID::randomUUID

	/** 
	 * SRE Kernel instance
	 */
	var kernel : SREBootstrap

	/** 
	 * The default SARL context where environment and boids are spawned
	 */
	var defaultSARLContext : AgentContext

	/** 
	 * Identifier of the environment
	 */
	var environment : UUID

	var width = Settings::EnvtWidth

	var height = Settings::EnvtHeight


	/** 
	 * Boolean specifying id the simulation is started or not.
	 */
	var isSimulationStarted = false

	/** 
	 * the vent space used to establish communication between GUI and agents,
	 * Especially enabling GUI to forward start event to the environment, 
	 * respectively the environment to send GUIRepain at each simulation step to the GUI
	 */
	var ^space : OpenEventSpace


	new {
	}

	def start : void {
		isSimulationStarted = true
		launchEnvironment
	}

	def stop : void {
		killAllAgents
		isSimulationStarted = false
	}

	

	private def launchEnvironment : void {

		kernel = SRE::getBootstrap

		defaultSARLContext = kernel.startWithoutAgent

		environment = kernel.startAgent(typeof(Environment), height, width,kernel)

		^space = defaultSARLContext.defaultSpace as OpenEventSpace

		// Registering to receive GUIRepaint events
		^space.register(this)

	}


	private def killAllAgents : void {
		// do something if you want to
	}

	override getID : UUID {
		id
	}
	
	def receiveEvent(^event : Event) {

	}
	
}
