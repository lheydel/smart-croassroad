package fr.sarl.project.intersection.gui

/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2019 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.*/

import fr.sarl.project.intersection.CarBody
import fr.sarl.project.intersection.Die
import fr.sarl.project.intersection.IntersectionBody
import io.sarl.core.OpenEventSpace
import java.awt.BasicStroke
import java.awt.Color
import java.awt.Frame
import java.awt.Graphics
import java.awt.Graphics2D
import java.awt.Image
import java.awt.Panel
import java.awt.Stroke
import java.awt.^event.WindowAdapter
import java.awt.^event.WindowEvent
import java.util.ArrayList
import java.util.Map
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Vector2d

import static extension java.lang.Math.*
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Graphical user interface for intersections.
 * 
 * @author Nicolas Gaud && Victor Sonza
 */
class EnvironmentGui extends Frame {


	@Accessors
	var evtGuiTimer : String 
	
	var handler : Closer

	var panel : EnvironmentGuiPanel

	new (comspace : OpenEventSpace, iheight : int, iwidth : int, iIntersections : ArrayList<IntersectionBody>) {
		super()
		setTimer(0)
		handler = new Closer(this, comspace)
		panel = new EnvironmentGuiPanel(iheight, iwidth,iIntersections)

		this.title = "Intersection Simulation"
		this.resizable = false
		
		// iwidth et iheight sont récup de "Settings.sarl", fonction constructeur de la GUi appelé depuis
		// Initialize de l'agent environment
		this.setSize(iwidth, iheight)
		this.locationRelativeTo = null
		addWindowListener(handler)

		add("Center", panel)
		this.visible = true
	}

/*
	def setCars(intersections : ArrayList<IntersectionBody>) {
		this.panel.cars = cars
	}*/

	override paint(g : Graphics) {
		super.paint(g)
		this.panel.timer = this.evtGuiTimer
		this.panel.paint(g)
	}
	
	def setTimer(nbSec : double) {
		evtGuiTimer = String.format("Temps moy. : %.2f sec", nbSec)
	}

}

package class Closer extends WindowAdapter {
	var ^space : OpenEventSpace
	var iframe : Frame

	new(parent : Frame, comspace : OpenEventSpace) {
		^space = comspace
		iframe = parent
	}

	/** 
	 * Clean the simulation asking the agents to die before disposing the window
	 */
	override windowClosing(^event : WindowEvent) {
		^space.emit(UUID.randomUUID, new Die)
		iframe.dispose();
	}

}

/** 
 * The GUI of the Simulation
 * 
 * @author Nicolas GAUD
 */
package class EnvironmentGuiPanel extends Panel {

			/** 
		 * Double buffering management.
		 */
	var myGraphics : Graphics

	/** 
	 * Double buffering management.
	 */
	var myCanvas : Graphics

	/** 
	 * Double buffering management.
	 */
	var myImage : Image

	@Accessors
	var timer : String

	var width : int

	var height : int

	var intersections : ArrayList<IntersectionBody>

	var cars : Map<UUID, CarBody>

	def setCars(cars : Map<UUID, CarBody>) {
		this.cars = cars
	}

	new (iheight : int, iwidth : int, iIntersections : ArrayList<IntersectionBody>) {
		super()
		width = iwidth
		height = iheight
		intersections = iIntersections
		cars = newHashMap
		if(intersections !== null)
		{
			for (i : intersections) {
				var tmpCars = i.getCars
				if (tmpCars !== null)
				{
					cars.putAll(tmpCars)	
				}
				
			}
		}
	}

	override paint(g : Graphics) {
		if ((myCanvas !== null) && (myGraphics !== null)) {
			val bgColor = new Color(0.6F, 0.6F, 0.6F)
			myCanvas.color = bgColor
			myCanvas.fillRect(0, 0, width * 2 - 1, height * 2 - 1)
			myCanvas.setColor(Color::BLACK)
			myCanvas.drawRect(0, 0, width * 2 - 1, height * 2 - 1)

			paintBuilding(myCanvas, 0, 0, 400, 400) // en haut à gauche

			paintBuilding(myCanvas, 0, 600, 400, 400) // en haut à droite

			paintBuilding(myCanvas, 600, 0, 400, 400) // en bas à gauche

			paintBuilding(myCanvas, 600, 600, 400, 400) // en bas à droite

			// VOIE A (au milieu en haut)
			drawDashedLine(myCanvas, 500, 0, 500, 400)
			drawStopLine(myCanvas, 401, 399, 499, 399)

			// VOIE B (au centre à gauche)
			drawDashedLine(myCanvas, 0, 500, 400, 500)
			drawStopLine(myCanvas, 398, 500, 398, 598)

			// VOIE C (au centre à droite)
			drawDashedLine(myCanvas, 600, 500, 1000, 500)
			drawStopLine(myCanvas, 601, 498, 601, 401)

			// VOIE D (au milieu en bas)
			drawDashedLine(myCanvas, 500, 600, 500, 1000)
			drawStopLine(myCanvas, 501, 601, 598, 601)


			drawTimer(myCanvas,10,20,timer)
			
			// Painting the cars
			if(cars!==null)
			{
				for (car : cars.values) {
					paintCar(myCanvas, car)
				}
			}

			/* for (boid : boids.values) {
			 * paintBoid(myCanvas, boid)
			 * }
			 */
			myGraphics.drawImage(myImage, 0, 0, this)
		}
	}

	def update(g : Graphics) {
		g.paint
	}

	override doLayout {
		super.doLayout

		width = (this.size.width / 2)
		height = this.size.height / 2

		myImage = createImage(width * 2, height * 2)
		myCanvas = myImage.graphics
		myGraphics = this.graphics
	}
	
	def drawTimer(g:Graphics,posX:int,posY:int,text : String)
	{
		g.color = Color.WHITE
		g.drawString(text,posX,posY)
	}
	

	def paintBuilding(g : Graphics, posX : int, posY : int, width : int, height : int) {
		g.color = Color.DARK_GRAY
		g.fillRect(posX, posY, width, height)
	}

	def drawDashedLine(g : Graphics, posX1 : int, posY1 : int, posX2 : int, posY2 : int) {
		g.color = Color.WHITE
		val g2d : Graphics2D = g.create() as Graphics2D
		val f : float[] = #[9]

		val dashed : Stroke = new BasicStroke(2, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, f, 0);
		g2d.stroke = dashed
		g2d.drawLine(posX1, posY1, posX2, posY2);

        //gets rid of the copy
        g2d.dispose();
	}

	def drawStopLine(g : Graphics, startX : int, startY : int, endX : int, endY : int) {
		g.color = Color.WHITE
		val g2d : Graphics2D = g.create() as Graphics2D
		val thick : Stroke = new BasicStroke(3)
		g2d.stroke = thick
		g2d.drawLine(startX, startY, endX, endY)

		g2d.dispose()
	}

	// Self explanatory
	// We could get some inspiration from that to draw our cars
	def paintCar(g : Graphics, car : CarBody) 
	{
		var posX = car.position.x as int
		var posY =car.position.y as int
		var direction = car.speed.angle
		var cos = direction.cos
		var sin = direction.sin

		g.color = Color.BLACK
	

		// g.drawLine(StartX,StartY,endX,EndY)

		g.drawLine(posX + ( 15 * cos ) as int, posY + ( 15 * sin ) as int, posX - ( 12 * cos + 12 * sin ) as int,
			posY - ( 12 * sin -12 * cos ) as int)
		g.drawLine(posX + ( 15 * cos ) as int, posY + ( 15 * sin ) as int, posX - ( 12 * cos - 12 * sin ) as int,
			posY - ( 12 * sin + 12 * cos ) as int)
		g.drawLine(posX - ( 12 * cos + 12 * sin ) as int, posY - ( 12 * sin - 12 * cos ) as int,
			posX - ( 12 * cos - 12 * sin ) as int, posY - ( 12 * sin + 12 * cos ) as int)
	}

	private static def getAngle(v : Vector2d) : double {
		var zero = 1E-9
		if ((v.x * v.x) < zero) {
			if(v.y >= 0) return (PI / 2)
			return (-1 * PI / 2)
		}
		if(v.x >= 0) return (v.y / v.x).atan
		if(v.y >= 0) return ( PI + (v.y / v.x).atan )
		return ( (v.y / v.x).atan - PI )
	}

}
