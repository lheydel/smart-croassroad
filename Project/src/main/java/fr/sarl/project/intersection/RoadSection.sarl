/** 
 * 
 */
package fr.sarl.project.intersection

import java.util.ArrayList
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * @author El Popcorn
 * 
 */
class RoadSection extends Object 
{
	@Accessors
	var numSection : int

	@Accessors
	var positionNorthWest : Vector2d

	@Accessors
	var positionSouthEast : Vector2d
	
	@Accessors
	var waitingList : ArrayList<CarBody>
	
	@Accessors
	var width : int // Width of the road section (THE HALF THAT IS USEFUL)
	
	@Accessors
	var length : int // Length of the road section
	

	new 
	{
		numSection = -1

		this.positionNorthWest = new Vector2d(-1, -1)
		
		this.positionSouthEast = new Vector2d(-1, -1)
		
		this.waitingList = newArrayList
		
		this.width = -1
		
		this.length =-1
	}
	
	
	new(numS : int,posNW : Vector2d, posSE: Vector2d,w : int,l:int, c: ArrayList<CarBody>)
	{
		numSection = numS

		this.positionNorthWest = posNW
		this.positionSouthEast = posSE
		
		this.waitingList = c
		
		this.width = w
		this.length = l
	}


	// Check if the position is in my road Section return true if it's the case, otherwise returns false
	def isInRoadSection(carPosition : Vector2d) : boolean
	{
		val xOk = carPosition.x > this.positionNorthWest.x && carPosition.x < positionSouthEast.x
		val yOk = carPosition.y > this.positionNorthWest.y && carPosition.y < positionSouthEast.y
		
		return xOk && yOk 
	}

	/*
	 * returns true if the road section is horizontal, false otherwise
	 */
	def isHorizontal():boolean
	{
		return (Math.abs(positionNorthWest.x - positionSouthEast.x) >
			Math.abs(positionNorthWest.y - positionSouthEast.y)) 		// checks the orientation of our road section
	}

	/*
	 * @Author Victor Sonza
	 * Gets the first available spawning point in a road section
	 * returns it if the point is contained in the road section, else, returns null
	 * TODO	update
	 */
	def getSpawnPoint():Vector2d
	{
		var spawnPoint: Vector2d = new Vector2d
		
		var waitingSize =waitingList.size +1
		
		var usedSize = waitingSize * 35+ waitingSize*5 // number of vehicles * their size + gap between vehicle * size of the gap
		
		var middle = 0
		
		var horizontal = isHorizontal
		
		// (positionNorthWest.x + (width / 2)) as int
		if(horizontal)
		{
			middle = (positionNorthWest.y + (width / 2)) as int
		}
		else
		{
			middle = (positionNorthWest.x + (width / 2)) as int
		}
		
		var xPos : int=-1
		var yPos : int =-1
		
		var toCheckX:int=-1
		var toCheckY : int =-1
		
		if(horizontal)
		{
			var left = positionNorthWest.x <= 500
			if (left) 
			{
				xPos = usedSize
				toCheckX = xPos
			}
			else
			{
				xPos = positionSouthEast.x as int - 20 // sinon ça sort :D vu qu'on est pas encore bien orienté
				// TODO : Virer le -20 quand l'orientation sera bonne
				toCheckX = positionNorthWest.x as int +usedSize
			}
			yPos = middle
			toCheckY = yPos
		}
		else
		{
			var top = positionNorthWest.y <= 500
			if (top) 
			{
				yPos = usedSize
				toCheckY = yPos
			}
			else
			{
				yPos = positionSouthEast.y as int -50 // sinon ça sort :D vu qu'on est pas encore bien orienté
				// TODO : Virer le -50 quand l'orientation sera bonne
				toCheckY = positionNorthWest.y as int + usedSize
			}
			xPos = middle
			toCheckX=xPos
		}
		
		if(isInRoadSection(new Vector2d(toCheckX,toCheckY)))
		{
			spawnPoint.x=xPos
			spawnPoint.y = yPos
		}
		else spawnPoint = null
		
		return spawnPoint
	}
	
	/*
	 * Returns the exit point of this road section
	 */
	def getExitPoint():Vector2d
	{
		var exitPoint: Vector2d = new Vector2d
		var horizontal = isHorizontal()
		if(horizontal) // gauche et droite
		{
			var left = positionNorthWest.x <=500
			if(left)
			{
				exitPoint.x = positionNorthWest.x 
				exitPoint.y = positionNorthWest.y - width / 2
				
			}
			else
			{
				exitPoint.x = positionSouthEast.x 
				exitPoint.y = positionSouthEast.y + width / 2
			}

		}
		else
		{
			var top = positionNorthWest.y<=500
			if(top)
			{
				exitPoint.x = positionNorthWest.x +(3*width)/2
				exitPoint.y = positionNorthWest.y
			}
			else
			{
				exitPoint.x = positionNorthWest.x - (width/2)
				exitPoint.y = positionSouthEast.y
			}
		}
		
		return exitPoint
	}
	
	

}
