package fr.sarl.project.intersection

import fr.sarl.project.intersection.gui.EnvironmentGui
import io.sarl.bootstrap.SREBootstrap
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.OpenEventSpace
import io.sarl.core.Schedules
import java.util.ArrayList
import java.util.UUID
import java.util.concurrent.ConcurrentSkipListSet
import org.arakhne.afc.math.geometry.d2.d.Vector2d
import org.eclipse.xtend.lib.annotations.Accessors
import java.util.concurrent.ConcurrentHashMap

/** 
 * The environmental agent in charge of collecting cars influences and computing the new state of the virtual world
 * @author Nicolas Gaud
 */
agent Environment {

	uses Logging, DefaultContextInteractions, Schedules, Lifecycle

	var kernel : SREBootstrap

	@Accessors
	var width : int

	@Accessors
	var height : int

	@Accessors
	var listIntersectionBody : ArrayList<IntersectionBody>
	
	@Accessors
	//var listCarBody : ArrayList<CarBody> = newArrayList
	var carBodies : ConcurrentHashMap<UUID, CarBody>
	
	@Accessors
	var population : Population = new Population()

	var influencesNeeded : Integer
	var nbCarAgents : Integer = 0
	
	var isStarted : Boolean = false

	/** 
	 * The Graphical user interface
	 */
	var myGUI : EnvironmentGui

	/*
	@Accessors
	var cars : ConcurrentHashMap<UUID, CarBody> */

	// Set of cars ID who has sent their influence in the current time step
	@Accessors
	var influences : ConcurrentSkipListSet<UUID>

	def addRandomNumberOfCar(min : int, max : int)
	{
		var alea = (min + (Math.random() * ((max - min) + 1))).toInteger
		
		for (var i = 0; i < alea; i++)
		{
			//var spawnOuest = listIntersectionBody.get(0).roadSections.get(3)
			var randomRoadSectionSpawn = randomRoadSection(listIntersectionBody.get(0))
			var randomRoadSectionDestination = randomRoadSection(listIntersectionBody.get(0))
			while (randomRoadSectionSpawn == randomRoadSectionDestination) {
				randomRoadSectionDestination = randomRoadSection(listIntersectionBody.get(0))
			}
			
			var carId = UUID.randomUUID 
			var car = new CarBody(
				carId,
				randomRoadSectionSpawn.getSpawnPoint(0),
				randomRoadSectionSpawn.numSection,
				new Vector2d(0,0),
				0
			)
			
			synchronized (randomRoadSectionSpawn.waitingList) {
				while (!randomRoadSectionSpawn.isSpawnPointFree()) {
				}
				
				synchronized (carBodies) {
					carBodies.put(carId, car)	
				}
				
				//listCarBody.add(car)
				// randomRoadSectionSpawn.waitingList.add(car)
				randomRoadSectionSpawn.waitingList.add(car)				
			}
			
			kernel.startAgentWithID(typeof(Car), carId,
				this.ID, 
				listIntersectionBody.get(0).owner,
				population,
				randomRoadSectionSpawn.spawnPoint,
				randomRoadSectionSpawn.numSection,
				randomRoadSectionDestination.exitRoadSectionPoint,
				randomRoadSectionDestination.numSection
			)
		}
			
	}
	
	def randomRoadSection(intersectionBody : IntersectionBody) : RoadSection {
		val rand = (Math.random() * intersectionBody.roadSections.length).toInteger
		return intersectionBody.roadSections.get(rand)
	}
	
	/*def addCarInRoadSection(c : Car,roadSection : RoadSection)
	{
		var sPoint = roadSection.spawnPoint
		if(sPoint !== null)
		{
			// 	new(owner : UUID, position : Vector2d, roadSection : int, speed : Vector2d)
			var car : CarBody = new CarBody(c.ID, sPoint, roadSection.numSection,new Vector2d(2,2))	
		}
	}*/

	on Initialize 
	{
		loggingName = "Environment"
		// Environment init parameters : An Integer the grid's height, An integer the grid's width
		if (occurrence.parameters.size > 1) {
			if (occurrence.parameters.get(0) instanceof Integer) {
				height = occurrence.parameters.get(0) as Integer
			}

			if (occurrence.parameters.get(1) instanceof Integer) {
				width = occurrence.parameters.get(1) as Integer
			}
			if (occurrence.parameters.get(2) instanceof SREBootstrap)
			{
				kernel = occurrence.parameters.get(2) as SREBootstrap
			}
			
			
			/*
			 * car body = new body
			 * simu.add(body)
			 * 
			 * kernel.spawnWithID(typeof(..),ID)
			 */
			carBodies = new ConcurrentHashMap
			listIntersectionBody = newArrayList
			var intersectionId = UUID.randomUUID()
			var intersectionBody = new IntersectionBody(intersectionId)  // links the body to its owner agent (what we actually have in the environment agent)
			kernel.startAgentWithID(typeof(Intersection), intersectionId, intersectionBody) // starts our intersection agent
			
			population.maxAcc = 1.0
			population.maxSpeed = 5.0
			
			/*var myCar =kernel.startAgent(typeof(Car))
			// new(owner : UUID, position : Vector2d, roadSection : int, speed : Vector2d)
			var aRoadSection = intersectionBody.roadSections.get(0)
			var myCarBody = new CarBody(myCar, aRoadSection.spawnPoint, aRoadSection.numSection,
				new Vector2d(0,2))
				
			aRoadSection.waitingList.add(myCarBody)*/
			listIntersectionBody.add(intersectionBody)

			every(3000) [
				addRandomNumberOfCar(1, 5)
			]
			
			this.myGUI = new EnvironmentGui(defaultSpace as OpenEventSpace, height, width, this.listIntersectionBody)
			
			//cars = null
			
			influences = new ConcurrentSkipListSet
			
			
			myGUI.repaint
			
			//emit(new Start(carBodies))[it.UUID == this.ID]
			
		}
	}

	on Start 
	{
	//	while (defaultSpace.participants.size < 3) {}
		//this.cars = occurrence.perceivedAgentBody
		// new GuiRepaint(cars).emit
		influencesNeeded = nbCarAgents
		sendPerception
		
	}

	on Action 
	{
		// TODO
		synchronized (carBodies) {
			synchronized (influences) { // Two very important "synchronized" blocks that prevent the simulation from thread interblocking
				if (carBodies.containsKey(occurrence.source.UUID)) {
					this.influences.add(occurrence.source.UUID)
					
					//TODO
					applySpeed(occurrence.influence, carBodies.get(occurrence.source.UUID), occurrence.direction)
				}
				synchronized (influencesNeeded) {
					if (this.influences.size == influencesNeeded) {
						// All boids have sent their influences
						in(Settings::pause) [
							influencesNeeded = nbCarAgents
							new GuiRepaint().emit
							sendPerception
							if (Settings::isLogActivated) {
								info("New Simulation Step.")
							}
						]
						this.influences.clear
				}
				}
				
			}
		}
	}
	
	def sendPerception() {
		synchronized (listIntersectionBody) {
			for (intersectionBody : listIntersectionBody) {
				for (roadSection : intersectionBody.roadSections) {
					var car : CarBody

					if (roadSection.waitingList.size > 0) {
						car = roadSection.waitingList.get(0)
						val carId = car.owner
						new Perception(car, null).emit[it.UUID == carId]
					}

					for (var i : int = 1; i < roadSection.waitingList.size; i++) {
						car = roadSection.waitingList.get(i)
						val carId = car.owner
						new Perception(car, roadSection.waitingList.get(i - 1)).emit[it.UUID == carId]
					}

					if (roadSection.leavingList.size > 0) {
						car = roadSection.leavingList.get(0)
						val carId = car.owner
						new Perception(car, null).emit[it.UUID == carId]
					}

					for (var i : int = 1; i < roadSection.leavingList.size; i++) {
						car = roadSection.leavingList.get(i)
						val carId = car.owner
						new Perception(car, roadSection.leavingList.get(i - 1)).emit[it.UUID == carId]
					}
				}
			}
		}
	}
	
	on CarReady {
		synchronized (nbCarAgents) {
			nbCarAgents++	
		}

		synchronized (isStarted) {
			if (!isStarted) {
				new Start().emit
				isStarted = true
			}
		}
		
	}
	
	on LeaveWaitingList{
		synchronized (carBodies) {
			synchronized (listIntersectionBody) {
				for (intersection : this.listIntersectionBody) {
					if (intersection.owner == occurrence.intersection) {
						for(roadSection : intersection.roadSections){
							if (roadSection.numSection == occurrence.roadSection) {
								roadSection.waitingList.remove(this.carBodies.get(occurrence.car))
								roadSection.leavingList.add(this.carBodies.get(occurrence.car))
							}
						}
					}
				}
			}
		}
	}
	
	on LeaveLeavingList {
		synchronized (carBodies) {
			synchronized (listIntersectionBody) {
				for (intersection : this.listIntersectionBody) {
					if (intersection.owner == occurrence.intersection) {
						for (roadSection : intersection.roadSections) {
							if (roadSection.numSection == occurrence.roadSection) {
								roadSection.leavingList.remove(this.carBodies.get(occurrence.car))
								this.carBodies.remove(occurrence.car)
							}
						}
					}
				}
			}
		}
	}

	on CarDead {
		synchronized (nbCarAgents) {
			nbCarAgents--
		}
		synchronized (influencesNeeded) {
			influencesNeeded--
		}

	}
	
	def applySpeed(speed : Vector2d, body : CarBody, direction : Integer) {
		body.direction = direction
		body.position = body.position + speed
		body.speed = speed
	}

	on Die 
	{
		killMe
	}

	on GuiRepaint
	{
		this.myGUI.setCars(carBodies)
		this.myGUI.repaint()
	}
	
	on UpdateTimer {
		myGUI.setTimer(occurrence.timer)
	}

}
