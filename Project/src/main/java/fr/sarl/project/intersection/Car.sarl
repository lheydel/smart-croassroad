/** 
 * 
 */
package fr.sarl.project.intersection

import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import io.sarl.core.Lifecycle
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/** 
 * @author ASaunier
 * 
 */
agent Car 
{
	uses Logging, DefaultContextInteractions, Schedules, Lifecycle
	
	// ID of the environmental agent
	var environment : UUID
	
	// variable of the car
	var position : Vector2d
	var speed : Vector2d
	var acceleration : Double
	var destination : Vector2d
	var direction : int
	/* Init parameters :
	 * [0] North
	 * [1] West
	 * [2] East
	 * [3] South
	 * */
	 
	var group :Population // constant about cars
		

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		
		//TODO Code to Initialize the car
		
		info("The agent was started.")
		if (occurrence.parameters.size > 1) {
			if (occurrence.parameters.get(0) instanceof UUID) {
				environment = occurrence.parameters.get(0) as UUID
			}
			if (occurrence.parameters.get(1) instanceof Population) {
				group = occurrence.parameters.get(1) as Population
				this.acceleration = group.maxAcc
			}
			
		}
		this.speed.length=0.0
		//TODO initialize var
		//this.position= ?????
		//this.destination=????
		//this.direction=???
		// la position vas dependre de la position initial
		
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}


	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
		
		//TODO Code to present the car to the intersection when it joined it
		
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
		
		//TODO Code for when the car leave the intersection
		
	}
	
	on Wait {
		
		//TODO Code for when the car need to wait
		speed.set(0.0,0.0)
		//TODO define a deceleration
		
	}	
	
	on Go {
		
		//TODO Code for when the car can go
		
	}
	on Perception{
		//TODO code to ajuste  car's speed and acceleration depending of other cars 
	}

	def follow(carToFollow : CarBody) : Vector2d {

		if ((carToFollow !== null) && (carToFollow.owner != this.ID)) {
			
			//TODO Code for the car to follow another one
			
		}

	}
	def acceleration  {
		//acceleration linéaire en fonction de la direction du véhicule 
		
			if (direction == 1 && this.speed.x <= group.maxSpeed) {
				this.speed.setX(this.speed.getX + acceleration)
				this.speed.setY(0)
			}
			else if (direction == 2 && this.speed.y >= -group.maxSpeed) {
				this.speed.setY(this.speed.getY - acceleration)
				this.speed.setX(0)
			} 
			else if (direction == 3 && this.speed.y <= group.maxSpeed) {
				this.speed.setY(this.speed.getY + acceleration)
				this.speed.setX(0)
			} 
			else if (direction == 4 && this.speed.x >= -group.maxSpeed) {
				this.speed.setX(this.speed.getX - acceleration)
				this.speed.setY(0)
			}
			else{
				info("error direction acceleration ")
			}
		
	}

	def decceleration {
		// decceleration linéaire en fonction de la direction du véhicule
		if (this.speed.length < 0.0) {
			if (direction == 1 && this.speed.x >= 0.0) {
				this.speed.setX(this.speed.getX - acceleration)
			} else if (direction == 2 && this.speed.y<=0.0) {
				this.speed.setY(this.speed.getY +acceleration)
			} else if (direction == 3 && this.speed.y>=0.0) {
				this.speed.setY(this.speed.getY - acceleration)
			} else if (direction == 4 && this.speed.y<=0.0) {
				this.speed.setX(this.speed.getX + acceleration)
			} else {
				info("error direction decceleration")
			}
		}
	}

}
