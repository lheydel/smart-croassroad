/** 
 * 
 */
package fr.sarl.project.intersection

import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import io.sarl.core.Lifecycle
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/** 
 * @author ASaunier
 * 
 */
agent Car 
{
	uses Logging, DefaultContextInteractions, Schedules, Lifecycle
	
	// ID of the environmental agent
	var intersection : UUID
	
	// variable of the car
	var position : Vector2d
	var speed : Vector2d
	//var acceleration : Double
	var destination : Vector2d
		

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		
		//TODO Code to Initialize the car
		
		intersection = occurrence.parameters.get(0) as UUID
		position = occurrence.parameters.get(1) as Vector2d
		destination = occurrence.parameters.get(2) as Vector2d
		speed = new Vector2d(0,0)
		
		info("Car : " + this.ID +" was started.")
	}

	on Destroy {
		// Event triggered when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent : " + this.ID + " was stopped.")
		killMe
	}


	on ContextJoined {
		// Event triggered when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
		
		//TODO Code to present the car to the intersection when it joined it
		info("the car : " + this.ID + " joined the intersection")
		
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
		
		//TODO Code for when the car leave the intersection
		
	}
	
	on Wait {
		
		//TODO Code for when the car need to wait
		
	}	
	
	on Go {
		
		//TODO Code for when the car can go
		
	}
	
	
	on Die
	{
		info("Agent car : " + this.ID + " stopped by the environment")
		killMe
	}

	def follow(carToFollow : CarBody) : Vector2d {

		if ((carToFollow !== null) && (carToFollow.owner != this.ID)) {
			
			//TODO Code for the car to follow another one
			
		}

	}

}
