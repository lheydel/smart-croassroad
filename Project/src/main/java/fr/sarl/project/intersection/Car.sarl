/** 
 * 
 */
package fr.sarl.project.intersection

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.UUID
import org.arakhne.afc.math.geometry.d2.d.Path2d
import org.arakhne.afc.math.geometry.d2.d.Point2d
import org.arakhne.afc.math.geometry.d2.d.Vector2d

/** 
 * @author ASaunier
 * 
 */
agent Car 
{
	uses Logging, DefaultContextInteractions, Schedules, Lifecycle, InnerContextAccess

	// ID of the environmental agent
	var environment : UUID
	// ID of the intersection agent
	var intersection : UUID
	
	// variable of the car
	var position : Vector2d
	var roadSectionSpawn : int
	var speed : Vector2d
	var acceleration : Double
	var destination : int
	var roadSectionDestination : int
	var vectorEndPoint : Vector2d
	/* direction value :
	 * [0] South
	 * [1] West
	 * [2] East
	 * [3] North
	 */
	var direction : int
	var group :Population
	
	// true if the car can cross the intersection
	var canGo = false
	// true if the car is close enough to the intersection
	var nextTo = false
	// Define the points of the intersection where the car need to change of direction 
	var cheminIntersection : Point2d[]
	// Help to determine the next point
	var progressionIntersection = 0
		

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		
		// TODO Code to Initialize the car
		environment = occurrence.parameters.get(0) as UUID
		intersection = occurrence.parameters.get(1) as UUID
		group = occurrence.parameters.get(2) as Population
		acceleration = group.maxAcc
		position = occurrence.parameters.get(3) as Vector2d
		setDirection()
		roadSectionSpawn = occurrence.parameters.get(4) as Integer
		vectorEndPoint = occurrence.parameters.get(5) as Vector2d
		roadSectionDestination = occurrence.parameters.get(6) as Integer
		speed = new Vector2d(0, 0)
		
		// Determine where the car is going
		switch(roadSectionSpawn){
			case 1:{ // From North
				if(roadSectionDestination == 1) destination = 0 // Going back
				else if (roadSectionDestination == 2)destination = 1 // Going right
				else if(roadSectionDestination == 3) destination = 2 // Going left
				else if(roadSectionDestination == 4) destination = 3 // Going strait
			}
			case 3: { // From East
				if (roadSectionDestination == 1) destination = 1 // Going right
				else if (roadSectionDestination == 2) destination = 3 // Going strait
				else if(roadSectionDestination == 3) destination = 0 // Going back
				else if(roadSectionDestination == 4) destination = 2 // Going left
			}
			case 2: { // From West
				if (roadSectionDestination == 1) destination = 2 // Going left
				else if (roadSectionDestination == 2) destination = 0 // Going back
				else if(roadSectionDestination == 3) destination = 3 // Going strait
				else if(roadSectionDestination == 4) destination = 1 // Going right
			}
			case 4: { // // From South
				if (roadSectionDestination == 1) destination = 3 // Going strait
				else if (roadSectionDestination == 2) destination = 2 // Going left
				else if(roadSectionDestination == 3) destination = 1 // Going right
				else if(roadSectionDestination == 4) destination = 0 // Going back
			}
		}
		
		
		val waitTask = task("spawn wait")
		waitTask.every(100) [
			waitTask.cancel
		]
		
		// inform the environment that the car is ready
		new CarReady().emit[it.UUID == environment]

		// inform the intersection that the car is joining it
		emit(new JoinIntersection(
			this.ID,
			position,
			roadSectionSpawn,
			roadSectionDestination			
		))[it.UUID == intersection]
	}
	
	/**
	 *Define the direction of the car before crossing the intersection
	 */
	def setDirection() {
		if (position.y >= 600) {
			direction = 3
		} else if (position.y <= 400) {
			direction = 0
		} else if (position.x >= 600) {
			direction = 1
		} else if (position.x <= 400) {
			direction = 2
		}
	}

	/** 
	 * Define the direction of the car atfer crossing the intersection
	 */
	def setDirectionExit {
		if (position.y >= 600) {
			direction = 0
		} else if (position.y <= 400) {
			direction = 3
		} else if (position.x >= 600) {
			direction = 2
		} else if (position.x <= 400) {
			direction = 1
		}
	}

	on Destroy {
		// Event triggered when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent : " + this.ID + " was stopped.")
		killMe
	}
	
	on Go {
		// the intersection agent inform the car that it can cross the intersection
		if (occurrence.carToFollow == null) {
			canGo = true
		}else{
			canGo =true
		}
	}
	
	on Perception{
		
		// list of carBody in the roadSection of the car sent by the environment
		// to allow the car respond to send back his action
		
		var frontCar = occurrence.frontCarBody
		var myBody = occurrence.carBody
		if ((myBody !== null) && (myBody.owner == this.ID)) {
			// Update position of body 
			this.position = myBody.position
			
			switch(this.direction){
				case 0: if(position.y > 1100) emit(new Die)[it.UUID == this.ID]
				case 1: if(position.x < -100) emit(new Die)[it.UUID == this.ID]
				case 2: if(position.x > 1100) emit(new Die)[it.UUID == this.ID]
				case 3: if(position.y < -100) emit(new Die)[it.UUID == this.ID]
			}
		}
		
		in(Settings::pause) [ // Inform the intersection of the action the car want to do
			emit(new Action(think(frontCar), this.direction))[it.UUID == this.environment]
			

			if (Settings::isLogActivated) {
				info("Sending Influences.")
			}
		]
		// Inform the intersection of the new position of the car
		new UpdatePosition(this.ID, this.position).emit
	}

		
	
	
	on Die
	{
		// inform the environment of the destruction of the car
		new CarDead().emit[it.UUID == environment]
		emit(new LeaveLeavingList(this.roadSectionSpawn, this.ID, this.intersection)) [
			it.UUID == this.environment
		]
		info("Agent car : " + this.ID + " stopped by the environment")
		killMe
	}
	
	
	/**
	 * Not Used Actually
	 */
	def follow(carToFollow : CarBody) : Vector2d {

		if ((carToFollow !== null) && (carToFollow.owner != this.ID)) {
			
		}

	}
	
	/**
	 * Define the speed of the car and allow it to reach max speed
	 */
	def acceleration  {
		//acceleration linéaire en fonction de la direction du véhicule 
		
			if (direction == 0 && this.speed.y <= group.maxSpeed-acceleration) {
				this.speed.setY(this.speed.getY + acceleration)
				this.speed.setX(0)
			}
			else if (direction == 1 && this.speed.x >= (-group.maxSpeed)+acceleration) {
				this.speed.setX(this.speed.getX - acceleration)
				this.speed.setY(0)
			} 
			else if (direction == 2 && this.speed.x <= group.maxSpeed-acceleration) {
				this.speed.setX(this.speed.getX + acceleration)
				this.speed.setY(0)
			} 
			else if (direction == 3 && this.speed.y >= (-group.maxSpeed)+acceleration) {
				this.speed.setY(this.speed.getY - acceleration)
				this.speed.setX(0)
			}
			else{
			}
	}

	/**
	 * Define the speed of the car and allow it to stop
	 */
	def decceleration {
		// decceleration linéaire en fonction de la direction du véhicule
		
		if (direction == 0 && this.speed.y >= acceleration) {
			this.speed.setY(this.speed.getY - acceleration)
		} else if (direction == 1 && this.speed.x <= -acceleration) {
			this.speed.setX(this.speed.getX +acceleration)
		} else if (direction == 2 && this.speed.x >= acceleration) {
			this.speed.setX(this.speed.getX - acceleration)
		} else if (direction == 3 && this.speed.y <= (-acceleration)) {
			this.speed.setY(this.speed.getY + acceleration)
		} else {
		}
	}
	/**
	 * return list of position where the car need to change of direction
	 */
	def traverserInter(dest : int) {
		var point = new Vector2d
		var point2 = new Vector2d
		var cible= new Vector2d
		var courbe = new Path2d
		courbe.moveTo(this.position.getX(), this.position.getY())
		if (dest == 1) { // Go right
			if (this.direction == 0) { // from North
				point.setX(450)
				point.setY(450)
				cible.setX(this.vectorEndPoint.getX -50)
				cible.setY(this.vectorEndPoint.getY)
				courbe.quadTo(point.getX(),
						point.getY(), cible.getX(), cible.getY())
				
			}
			if (this.direction == 1) { // from East
				point.setX(550)
				point.setY(450)
				cible.setX(this.vectorEndPoint.getX)
				cible.setY(this.vectorEndPoint.getY - 50)
				courbe.quadTo(point.getX(), point.getY(), cible.getX(), cible.getY())

				}
			if (this.direction == 2) { // from West
				point.setX(450)
				point.setY(550)
				cible.setX(this.vectorEndPoint.getX)
				cible.setY(this.vectorEndPoint.getY + 50)
				courbe.quadTo(point.getX(), point.getY(), cible.getX(), cible.getY())
				}
			if (this.direction == 3) { // from South
				point.setX(550)
				point.setY(550)
				cible.setX(this.vectorEndPoint.getX + 50)
				cible.setY(this.vectorEndPoint.getY)
				courbe.quadTo(point.getX(), point.getY(), cible.getX(), cible.getY())
				}
			
		} else if (dest == 2) { // Go left

			if (this.direction == 0) { // from North
				point.setX(450)
				point.setY(550)
				cible.setX(this.vectorEndPoint.getX + 50)
				cible.setY(this.vectorEndPoint.getY)
				courbe.quadTo(point.getX(), point.getY(), cible.getX(), cible.getY())

			}
			if (this.direction == 1) { // from East
				point.setX(450)
				point.setY(450)
				cible.setX(this.vectorEndPoint.getX)
				cible.setY(this.vectorEndPoint.getY + 50)
				courbe.quadTo(point.getX(), point.getY(), cible.getX(), cible.getY())

			}
			if (this.direction == 2) { // from West
				point.setX(550)
				point.setY(550)
				cible.setX(this.vectorEndPoint.getX)
				cible.setY(this.vectorEndPoint.getY - 50)
				courbe.quadTo(point.getX(), point.getY(), cible.getX(), cible.getY())
			}
			if (this.direction == 3) { // from South
				point.setX(550)
				point.setY(450)
				cible.setX(this.vectorEndPoint.getX - 50)
				cible.setY(this.vectorEndPoint.getY)
				courbe.quadTo(point.getX(), point.getY(), cible.getX(), cible.getY())
				}
			
		} else if (dest == 0) { // turn back
			if (this.direction == 0) { // from North
				point.setX(450)
				point.setY(550)
				point2.setX(550)
				point2.setY(550)
				cible.setX(this.vectorEndPoint.getX)
				cible.setY(this.vectorEndPoint.getY - 50)
				courbe.curveTo(point.getX(), point.getY(), point2.getX(), point2.getY(), cible.getX(), cible.getY())
			}
			if (this.direction == 1) { // from East
				point.setX(450)
				point.setY(450)
				point2.setX(450)
				point2.setY(550)
				cible.setX(this.vectorEndPoint.getX + 50)
				cible.setY(this.vectorEndPoint.getY)
				courbe.curveTo(point.getX(), point.getY(), point2.getX(), point2.getY(), cible.getX(), cible.getY())

			}
			if (this.direction == 2) { // from West
				point.setX(550)
				point.setY(550)
				point2.setX(550)
				point2.setY(450)
				cible.setX(this.vectorEndPoint.getX - 50)
				cible.setY(this.vectorEndPoint.getY)
				courbe.curveTo(point.getX(), point.getY(), point2.getX(), point2.getY(), cible.getX(), cible.getY())
			}
			if (this.direction == 3) { // from South
				point.setX(550)
				point.setY(450)
				point2.setX(450)
				point2.setY(450)
				cible.setX(this.vectorEndPoint.getX)
				cible.setY(this.vectorEndPoint.getY + 50)
				courbe.curveTo(point.getX(), point.getY(), point2.getX(), point2.getY(), cible.getX(), cible.getY())
				}			
		}
		
		
		return courbe.toPointArray()
		
	}
	
	
	/**
	 * Define the content of the action to send to the environment
	 */
	def think(frontCar : CarBody) : Vector2d {
		
		var distance = 101.0
		
		if(canGo && !nextTo){
			var center = new Vector2d(500,500)
			
			switch(direction){
				case 0: nextTo = this.position.y >= center.y - 110
				case 1: nextTo = this.position.x <= center.x + 110
				case 2: nextTo = this.position.x >= center.x - 110
				case 3: nextTo = this.position.y <= center.y + 110
			}
			
			if (nextTo) {
				
				if (destination == 3) { //if going strait
					// declare leaving the waiting list of his current roadSection
					emit(new LeaveWaitingList(this.roadSectionSpawn, this.ID, this.intersection)) [
						it.UUID == this.environment
					]
				} else {
					cheminIntersection = traverserInter(this.destination)
					
				}
				
			}
		}
			
		if (nextTo) {

			if (destination ==3){

				
				
			} else {

				if (progressionIntersection < cheminIntersection.length -1) {

					var point = cheminIntersection.get(progressionIntersection)
					if(
						(point.x - this.position.x) < 10 && (point.x - this.position.x) > -10 &&
						(point.y - this.position.y) < 10 && (point.y - this.position.y) > -10 &&
						progressionIntersection > 0)
						{
							info("pos between acceptable range")
							if (destination == 1 && progressionIntersection < cheminIntersection.length - 1 &&
								progressionIntersection >= 1) {
								switch (this.direction) {
									case 0: this.direction = 1
									case 1: this.direction = 3
									case 2: this.direction = 0
									case 3: this.direction = 2
								}
							} else if (progressionIntersection < cheminIntersection.length - 1 &&
								progressionIntersection >= 1) {
								switch (this.direction) {
									case 0: this.direction = 2
									case 1: this.direction = 0
									case 2: this.direction = 3
									case 3: this.direction = 1
								}
							}
						progressionIntersection++							
					}
					acceleration()

					if (progressionIntersection == 0) {
						emit(new LeaveWaitingList(this.roadSectionSpawn, this.ID, this.intersection)) [
							it.UUID == this.environment
						]
						progressionIntersection++	
					}
				} else {
					if (progressionIntersection == cheminIntersection.length) {
						setDirectionExit()
						this.speed = new Vector2d(0, 0)
						progressionIntersection++
					}
					
					acceleration()
					
					
				}
				
			}
			
		} else if (frontCar !== null) {
			if (frontCar.direction == this.direction) {
				switch (this.direction) {
					case 0: {
						// if on same line and too close
						if (frontCar.position.getX as int == this.position.getX as int &&
							((frontCar.position.getY - this.position.getY) as int) <= 75 &&
						((frontCar.position.getY - this.position.getY) as int) != 0) {
							distance = frontCar.position.getY - this.position.getY
						}
						if (this.position.y >= (400.0 - 20.0)) {
							distance = 75.0
						}
					}
					case 1: {
						if (frontCar.position.getY as int == this.position.getY as int &&
							((frontCar.position.getX - this.position.getX) as int) >= -75 &&
						((frontCar.position.getX - this.position.getX) as int) != 0) {
							distance = (frontCar.position.getX - this.position.getX) * -1
						}
						if (this.position.x <= (600.0 + 20.0)) {
							distance = 75.0
						}
					}
					case 2: {
						if (frontCar.position.getY as int == this.position.getY as int &&
							((frontCar.position.getX - this.position.getX) as int) <= 75 &&
						((frontCar.position.getX - this.position.getX) as int ) != 0) {

							distance = (frontCar.position.getX - this.position.getX)

						}
						if (this.position.x >= (400.0 - 20.0)) {
							distance = 75.0
						}
					}
					case 3: {
						if (frontCar.position.getX as int == this.position.getX as int &&
							((frontCar.position.getY - this.position.getY) as int) >= -75 &&
							((frontCar.position.getY - this.position.getY) as int) != 0) {
							distance = ( frontCar.position.getY - this.position.getY) * -1
						}
						if (this.position.y <= (600.0 + 20.0)) {
							distance = 75.0
						}
					}
				}
			}
		}
		if (!nextTo) {
			switch (this.direction) {
				case 0: {
					if (this.position.y >= (400.0 - 20.0)) {
						if (distance > 20.0)
							distance = 20.0
					}
				}
				case 1: {
					if (this.position.x <= (600.0 + 20.0)) {
						if (distance > 20.0)
							distance = 20.0
					}
				}
				case 2: {
					if (this.position.x >= (400.0 - 20.0)) {
						if (distance > 20.0)
							distance = 20.0
					}
				}
				case 3: {
					if (this.position.y <= (600.0 + 20.0)) {
						if (distance > 20.0)
							distance = 20.0
					}
				}
			}

			if ((distance as int) < 100 && (distance as int ) > 0) {
				decceleration()
		
			} else {
				acceleration()
		
			}
		}else if(destination == 3){
			acceleration()
		}
		return this.speed

	}
	
}
